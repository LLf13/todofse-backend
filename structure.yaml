openapi: 3.0.0
info:
  title: Todo API
  description: Very simple API for the Todo project in Fallstudie Softwareengineering
  version: 0.0.1
servers:
  - url: http://0.0.0.0:5000
    description: internal development. make sure docker compose stack is running

paths:
  /login:
    post:
      summary: Logs in a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
              required:
                - email
                - password
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /logout:
    post:
      summary: Logs out a user
      responses:
        '200':
          description: Successful logout
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /register:
    post:
      summary: Registers a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                username:
                  type: string
              required:
                - email
                - password
                - username
      responses:
        '200':
          description: Successful registration
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Invalid registration details
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /todos:
    get:
      summary: List all todos
      responses:
        '200':
          description: A list of todos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Todo'
    post:
      summary: Create a new todo
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Todo'
        required: true
      responses:
        '201':
          description: Todo created

  /todos/{id}:
    get:
      summary: Get a todo by id
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        '404':
          description: Todo not found

components:
  schemas:
    Todo:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        user_id:
          type: string
          required: true
        title:
          type: string
          required: true
        description:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        due_date:
          type: string
          format: date-time
        completed:
          type: boolean
        priority:
          type: string
          enum: [ Low, Medium, High ]
      required:
        - user_id
        - title